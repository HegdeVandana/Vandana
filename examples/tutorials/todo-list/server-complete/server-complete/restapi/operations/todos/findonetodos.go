// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FindonetodosHandlerFunc turns a function with the right signature into a findonetodos handler
type FindonetodosHandlerFunc func(FindonetodosParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindonetodosHandlerFunc) Handle(params FindonetodosParams) middleware.Responder {
	return fn(params)
}

// FindonetodosHandler interface for that can handle valid findonetodos params
type FindonetodosHandler interface {
	Handle(FindonetodosParams) middleware.Responder
}

// NewFindonetodos creates a new http.Handler for the findonetodos operation
func NewFindonetodos(ctx *middleware.Context, handler FindonetodosHandler) *Findonetodos {
	return &Findonetodos{Context: ctx, Handler: handler}
}

/*Findonetodos swagger:route GET /{id} todos findonetodos

Findonetodos findonetodos API

*/
type Findonetodos struct {
	Context *middleware.Context
	Handler FindonetodosHandler
}

func (o *Findonetodos) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindonetodosParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
